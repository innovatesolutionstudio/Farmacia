<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" crossorigin="anonymous" />
    <link rel="stylesheet" href="resources/css/cajas.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Cargamos Chart.js para crear gráficos -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <title>Ventas - Finanzas</title>
</head>
<body>

<!-- Encabezado -->
<div class="header-container">
  <div class="breadcrumb">
    <a href="/vista_Finanzas" class="reporte-link">
        <h1 style="color: #858B92; font-weight: bold; margin-right: 5px;">Finanzas</h1>
    </a>
    <h2 style="font-size: 40px; margin: 0 10px;">›</h2>
    <h1 style="font-weight: bold;">Ganancias</h1>
  </div>
</div>

<div class="container2">
    <!-- Card 1: Información del Empleado -->
    <div class="card1">
        <div class="header-card1">
            <span>Gráfico de Futuras Ganancias</span>
            <a href="#" onclick="verGrafico()">Ver más &raquo;</a>
        </div>
        <div class="content-card1">
            <div>
                <h2 id="nombreSuc">Cargando...</h2>
                <p>Sucursal</p>
            </div> 
            <div>
                <h2 id="prodconmayorganancias">Cargando..</h2>
                <p>Producto con Mayor Ganancias</p>
            </div>
        </div>
    </div>

    <!-- Card 2: Estado Actual de la Caja -->
    <div class="card1">
        <div class="header-card1">
            <span>Ganancias</span>
        </div>
        <div class="content-card1">
            <div>
                <h2 id="gananciaAnual">Cargando...</h2>
                <p>Ganancia Anual</p>
            </div>
            <div>
                <h2 id="gananciaMensual">Cargando...</h2>
                <p>Ganancias Mensual</p>
            </div>
        </div>
    </div>
</div>

<br>

<!-- Tabla de ventas y ganancias -->
<div class="card3">
    <div class="header-card1">
        <span>Historia de Ganancias por Gestión</span>
    </div>
    <div class="content-card2">
        <table class="tabla-historial">
            <thead>
                <tr>
                    <th>Ventas (Bs.)</th>
                    <th>Año</th>
                    <th>Ganancia (Bs.)</th>
                </tr>
            </thead>
            <% results.forEach(function(ganancia) { %>
              <tr>
                <td>Bs. <%= ganancia.Ventas_Total_Anual.toFixed(2) %></td>
                <td><%= ganancia.Ano %></td>
                <td>Bs. <%= ganancia.Ganancia_Total_Anual.toFixed(2) %></td>
              </tr>
            <% }); %>
        </table>
    </div>
</div>

<script>
    let m, b;

    // Función para abrir el gráfico
    function verGrafico() {
        const resultados = <%- JSON.stringify(results) %>;

        // Extraemos las ventas, años y ganancias
        const ventas = resultados.map(item => item.Ventas_Total_Anual);
        const anos = resultados.map(item => item.Ano);
        const ganancias = resultados.map(item => item.Ganancia_Total_Anual);

        // Calcular la regresión lineal
        const regresion = calcularRegresionLineal(ventas, ganancias);
        m = regresion.m;
        b = regresion.b;

        // Configuración del gráfico
        const datiedu3 = {
            labels: ventas.map((venta, i) => `${venta.toFixed(2)} Bs. (${anos[i]})`),
            datasets: [
                {
                    label: 'Ganancia Total Anual',
                    data: ventas.map((venta, index) => ({ x: venta, y: ganancias[index] })),
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderWidth: 1,
                    showLine: false
                },
                {
                    label: 'Línea de Regresión',
                    data: ventas.map(x => ({ x: x, y: m * x + b })),
                    borderColor: 'rgb(54, 162, 235)',
                    fill: false,
                    type: 'line',
                    pointRadius: 0
                }
            ]
        };

        const opzioni = {
            scales: {
                x: { title: { display: true, text: 'Ventas Totales (Bs.)' } },
                y: { title: { display: true, text: 'Ganancia Total (Bs.)' } }
            }
        };

        // Mostrar gráfico con SweetAlert2
        Swal.fire({
            title: 'Gráfico de Regresión Lineal',
            html: `
                <canvas id="Chartline" width="400" height="200"></canvas>
                <br>
                <div class="prediction-container">
                    <label for="ventasSelect">Selecciona una Venta:</label>
                    <select id="ventasSelect" class="ventas-select">
                      ${ventas.map((venta, i) => `<option value="${venta}" data-ano="${anos[i]}">${venta.toFixed(2)} Bs. (${anos[i]})</option>`).join('')}
                    </select>
                    <p id="resultadoPrediccion">Predicción automática al seleccionar ventas...</p>
                </div>
            `,
            showCloseButton: true,
            width: '70%',
            showConfirmButton: false,
            didOpen: () => {
                const ctx = document.getElementById('Chartline').getContext('2d');
                grafo2(datiedu3, opzioni, ctx);

                // Evento para predicción automática
                document.getElementById('ventasSelect').addEventListener('change', predecirGanancia);
            }
        });
    }

    // Crear gráfico con Chart.js
    function grafo2(dati, opzioni, ctx) {
        new Chart(ctx, { type: 'scatter', data: dati, options: opzioni || {} });
    }

    // Calcular regresión lineal
    function calcularRegresionLineal(x, y) {
        const n = x.length;
        const sumX = x.reduce((acc, val) => acc + val, 0);
        const sumY = y.reduce((acc, val) => acc + val, 0);
        const sumXY = x.reduce((acc, val, i) => acc + val * y[i], 0);
        const sumX2 = x.reduce((acc, val) => acc + val * val, 0);

        const m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
        const b = (sumY - m * sumX) / n;

        return { m, b };
    }

    // Predicción automática
    function predecirGanancia() {
        const select = document.getElementById('ventasSelect');
        const ventas = parseFloat(select.value);
        const ano = select.options[select.selectedIndex].dataset.ano;

        if (isNaN(ventas)) {
            document.getElementById('resultadoPrediccion').textContent = 'Selecciona un valor de ventas válido.';
            return;
        }

        const gananciaEstimada = m * ventas + b;
        document.getElementById('resultadoPrediccion').textContent = 
            `La ganancia estimada para ventas de Bs. ${ventas.toFixed(2)} (${ano}) es de Bs. ${gananciaEstimada.toFixed(2)}.`;
    }
</script>
<script>
       
    // Hacer una solicitud al servidor para obtener los datos
    fetch('/datosgananciasmetricas')
      .then(response => response.json())
      .then(data => {
        // Actualizar los divs con los datos recibidos
        document.getElementById('prodconmayorganancias').innerText =  data.prodconmayorganancias;
        document.getElementById('gananciaAnual').innerText = ' Bs. '+  data.gananciaAnual;
        document.getElementById('gananciaMensual').innerText = ' Bs. '+  data.gananciaMensual;
        document.getElementById('nombreSuc').innerText = data.nombreSuc;
        
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
    </script>
</body>
</html>
