<!DOCTYPE html>
<html lang="es">
    <head>
        <link rel="shortcut icon" href="#" />
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport"
            content="width=device-width,initial-scale=1,user-scalable=no" />
        <title>Registro de Compras</title>

        <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/sweetalert2@10.0.2/dist/sweetalert2.min.css" />
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <link rel="stylesheet" href="resources/css/FormularioComVen.css" />

        <script src="js/FiltroBusqueda.js"></script>
    </head>
    <body>
        <form id="detallesCompraForm" action="/nueva_compra"  method="POST"></form>
            <div class="header-container">
                <div class="breadcrumb">
                    <a href="/vista_compras" class="reporte-link "><h1
                            style="color: #858B92; font-weight: bold; margin-right: 5px;">Compras</h1></a>
                    <h2 style="font-size: 40px; margin: 0 10px;">›</h2>
                    <h1 style="font-weight: bold;">Nueva Compra</h1>
                    <!--recuperar nombre de la caja seleccionada-->
                </div>
                <div class="button-container">
                    <a type="button" onclick="confirmarCompra()" class="btn btn-group btn-success">
                        <img src="resources/images/iconos/venta.svg" alt="Crear">&nbsp;Registrar compra</a>
                    <a type="button" onclick="cancelarCompra()" class="btn btn-group btn-danger">
                        <img src="resources/images/iconos/cancel.svg" alt="Crear">&nbsp;Cancelar compra</a>
                </div>
                
            </div>
        
            <div class="container mt-3">
                <div class="form-group">
                    <label for="ID_Empleado">Codigo del empleado: </label>
                    <input type="text"
                        id="ID_Empleado" name="ID_Empleado" class="form-control"
                        maxlength="30" required  style="background-color:#ffffff; color: rgb(0, 0, 0);"
                        value="<%= ID_Empleado %>" readonly>
                </div>
                <div class="form-group">
                    <label for="fechaCompra">Fecha:</label>
                    <input type="date" class="form-control"
                            style="background-color:#ffffff; color: rgb(0, 0, 0);"
                            id="fechaCompra" name="fechaCompra" readonly>
                </div>
                <div class="form-group">
                    <label for="ID_Sucursal" class="form-label">Sucursal
                        :</label>
                    <select id="ID_Sucursal" class="form-select"
                        name="ID_Sucursal" required>

                    </select>
                </div>
                <div class="form-group">

                    <label for="ID_Proveedor"
                        class="form-label">Proveedor:</label>
                    <select class="form-control" id="ID_Proveedor"
                        class="form-select"
                        name="ID_Proveedor" required>
                        <!-- Las opciones serán llenadas por JavaScript -->
                    </select>
                </div>
      
            </div>
            <br>
            <h2>Detalles de la compra</h2>
            <div class="container">
                <div class="form-group">
                    <div  id="detallesCompra">
                        <label for="productoFiltro">Buscar Producto:</label>
                        <input type="text" class="form-control"
                                id="productoFiltro"
                                placeholder="Buscar producto..."
                                autocomplete="off" />
                        <div  id="dropdownProductos"
                                style="display: none;">
                        </div>
                    </div>
                </div>
               
                <div class="form-group">
                    <label for="unidad_empaque" >Unidad de empaque:</label>
                    <select class="form-control" id="unidad_empaque" aria-label="Cargando...">
                        <option value="Cargando...">Seleccionar</option>
                    </select>
                </div>
            </div>
            <div class="container2">
                <div class="form-group">
                    <label for="cantidadEmpaque">Cantidad de Empaque:</label>
                    <input type="number" class="form-control" id="cantidadEmpaque" min="1" placeholder="Cantidad Empaque U." />
                </div>
                <div class="form-group">
                    <label for="cantidadUnitario" >Cantidad Unitario:</label>
                    <input type="number" class="form-control"id="cantidadUnitario" min="1"placeholder="Cantidad Unitario U." />
                </div>

                <div class="form-group">
                    <label for="precio" >Precio unitario:</label>
                    <input type="number" class="form-control" id="precio" min="1" placeholder="Precio" />
                </div>
                <div class="form-group">
                    <label for="fecha_vencimiento" >Fecha de vencimiento:</label>
                    <input type="date" class="form-control" id="fecha_vencimiento" placeholder="Fecha de vencimiento" />
                </div>
                <div class="form-group">
                    <label for="total" >Total de la Compra:</label>
                        <input type="text" class="form-control" style="background-color:#407787; color: rgb(255, 255, 255);"
                                id="total" name="total" readonly>
                </div>
                <div class="form-group">
                    <label for="total" >Agregar producto:</label>

                    
                    <button type="button" class="button" id="agregarProducto">
                        <span class="button__text">Agregar Producto</span>
                        <span class="button__icon"><svg xmlns="http://www.w3.org/2000/svg" width="" viewBox="0 0 24 24" stroke-width="2" stroke-linejoin="round" stroke-linecap="round" stroke="currentColor" fill="none" class="svg"><line y2="19" y1="5" x2="12" x1="12"></line><line y2="12" y1="12" x2="19" x1="5"></line></svg></span>
                    </button>

                   
                </div>

            </div>
            <br>
            <div class="card3">
                <div class="header-card1">
                    <span>Productos Agregados</span>
                </div>
                <div class="content-card-formulario">
                    <table class="table-formulario" id="tablaProductosAgregados">
                        <thead>
                            <tr>
                                <th>ID_Producto</th>
                                <th>Unidad de Empaque</th>
                                <th>Cantidad Empaque</th>
                                <th>Cantidad Unitario</th>
                                <th>Precio</th>
                                <th>Subtotal</th> <!-- Nueva columna de Subtotal -->
                                <th>Fecha Vencimiento</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Aquí se agregarán los productos -->
                        </tbody>
                    </table>
                    
                    </div>
                </form>
            </div>
        </div>


    
<script>
const productoFiltro = document.getElementById("productoFiltro");
const dropdownProductos = document.getElementById("dropdownProductos");

productoFiltro.addEventListener("input", async function () {
  const searchTerm = productoFiltro.value.trim();

  if (searchTerm.length === 0) {
    dropdownProductos.style.display = "none";
    dropdownProductos.innerHTML = "";
    return;
  }

  const url = `/buscar_productos?q=${encodeURIComponent(searchTerm)}`;

  try {
    const response = await fetch(url);
    if (response.ok) {
      const data = await response.json();
      mostrarResultados(data);
    } else {
      throw new Error("Error al buscar productos");
    }
  } catch (error) {
    console.error("Error al obtener productos:", error);
  }
});

function mostrarResultados(productos) {
  dropdownProductos.innerHTML = "";

  if (productos.length === 0) {
    dropdownProductos.style.display = "none";
    return;
  }

  productos.forEach((producto) => {
    const option = document.createElement("div");
    option.classList.add("dropdown-item");
    option.textContent = `${producto.NombreProducto} - ${producto.UnidadVenta}`;
    option.addEventListener("click", function () {
      productoFiltro.value = `${producto.NombreProducto} - ${producto.UnidadVenta}`;
      dropdownProductos.style.display = "none";
    });
    dropdownProductos.appendChild(option);
  });

  dropdownProductos.style.display = "block";
}

// Cerrar el menú desplegable al hacer clic fuera de él
document.addEventListener("click", function (event) {
  const isClickInside =
    dropdownProductos.contains(event.target) ||
    productoFiltro.contains(event.target);
  if (!isClickInside) {
    dropdownProductos.style.display = "none";
  }
});

const fechaCompraInput = document.getElementById('fechaCompra');
fechaCompraInput.value = new Date().toISOString().slice(0, 10);
</script>

<script>
    const unidadEmpaqueSelect = document.getElementById('unidad_empaque');

    document.addEventListener('DOMContentLoaded', async function() {
        try {
            const response = await fetch('/obtener_unidades_empaque');
            if (response.ok) {
                const unidadesEmpaque = await response.json();
                mostrarUnidadesEmpaque(unidadesEmpaque);
            } else {
                throw new Error('Error al obtener unidades de empaque');
            }
        } catch (error) {
            console.error('Error al obtener unidades de empaque:', error);
        }
    });

    function mostrarUnidadesEmpaque(unidadesEmpaque) {
        unidadEmpaqueSelect.innerHTML = '<option value="">Seleccionar unidad de empaque</option>';

        unidadesEmpaque.forEach(unidad => {
            const option = document.createElement('option');
            option.value = unidad.ID_Unidad_Empaque;
            option.textContent = unidad.Nombre;
            unidadEmpaqueSelect.appendChild(option);
        });
    }
</script>



<script>
 document.addEventListener('DOMContentLoaded', function() {
    const unidadEmpaqueSelect = document.getElementById('unidad_empaque');
    const cantidadEmpaqueInput = document.getElementById('cantidadEmpaque');
    const cantidadUnitarioInput = document.getElementById('cantidadUnitario');
    const precioInput = document.getElementById('precio');
    const fechaVencimientoInput = document.getElementById('fecha_vencimiento');
    const tablaProductosAgregados = document.getElementById('tablaProductosAgregados').getElementsByTagName('tbody')[0];
    const agregarProductoBtn = document.getElementById('agregarProducto');

    agregarProductoBtn.addEventListener('click', function() {
        // Obtener valores de los inputs
        const producto = productoFiltro.value.trim();
        const unidadEmpaque = unidadEmpaqueSelect.options[unidadEmpaqueSelect.selectedIndex].text.trim();
        const cantidadEmpaque = parseInt(cantidadEmpaqueInput.value.trim(), 10);
        const cantidadUnitario = parseInt(cantidadUnitarioInput.value.trim(), 10);
        const precio = parseFloat(precioInput.value.trim());
        const fechaVencimiento = fechaVencimientoInput.value.trim();

        // Validar que todos los campos estén llenos
        if (!producto || unidadEmpaque === 'Seleccionar unidad de empaque' || !cantidadEmpaque || !cantidadUnitario || !precio || !fechaVencimiento) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Por favor completa todos los campos para agregar el producto.'
            });
            return;
        }

        // Calcular el subtotal (Cantidad de Empaque * Cantidad Unitario * Precio)
        const subtotal = cantidadEmpaque * cantidadUnitario * precio;

        // Crear nueva fila en la tabla
        const newRow = tablaProductosAgregados.insertRow();
        newRow.innerHTML = `
            <td data-id-producto="">${producto}</td>
            <td data-id-unidad-empaque="">${unidadEmpaque}</td>
            <td>${cantidadEmpaque}</td>
            <td>${cantidadUnitario}</td>
            <td>${precio.toFixed(1)} Bs.</td>
            <td>${subtotal.toFixed(1)} Bs.</td> <!-- Celda de Subtotal -->
            <td>${fechaVencimiento}</td>
            <td><button type="button" class="btn btn-danger btn-sm eliminar-btn">Eliminar</button></td>
        `;

        // Limpiar campos después de agregar
        limpiarCampos();

        // Asignar el evento de eliminar a los nuevos botones de eliminar
        const botonesEliminar = tablaProductosAgregados.getElementsByClassName('eliminar-btn');
        for (const boton of botonesEliminar) {
            boton.addEventListener('click', function() {
                eliminarFila(this);
            });
        }

        // Recalcular el total de la compra
        calcularTotal();
    });

    function limpiarCampos() {
        productoFiltro.value = '';
        unidadEmpaqueSelect.selectedIndex = 0;
        cantidadEmpaqueInput.value = '';
        cantidadUnitarioInput.value = '';
        precioInput.value = '';
        fechaVencimientoInput.value = '';
    }

    function calcularTotal() {
        let totalCompra = 0;
        const filasProductos = tablaProductosAgregados.getElementsByTagName('tr');

        for (const fila of filasProductos) {
            const subtotal = parseFloat(fila.cells[5].textContent.trim()); // Subtotal está en la columna 5 (índice 5)
            totalCompra += subtotal;
        }

        // Actualizar el campo de total con el valor calculado
        const totalInput = document.getElementById('total');
        totalInput.value = totalCompra.toFixed(1) + ' Bs.'; // Ajustar a dos decimales si es necesario
    }

    function eliminarFila(boton) {
        const row = boton.closest('tr');
        row.remove();

        // Recalcular el total después de eliminar una fila
        calcularTotal();
    }
});

    async function obtenerIDProducto(nombreProducto) {
    try {
        const response = await fetch(`/obtener_id_producto?nombre=${encodeURIComponent(nombreProducto)}`);
        if (!response.ok) {
            throw new Error('Error en la solicitud fetch');
        }
        const data = await response.json();
        return data.ID_Producto;
    } catch (error) {
        console.error('Error al obtener ID del producto:', error);
        return null;
    }
}
async function obtenerIDUnidadEmpaque(nombreUnidadEmpaque) {
    try {
        const response = await fetch(`/obtener_id_unidad_empaque?nombre=${encodeURIComponent(nombreUnidadEmpaque)}`);
        if (!response.ok) {
            throw new Error('Error en la solicitud fetch');
        }
        const data = await response.json();
        return data.ID_Unidad_Empaque;
    } catch (error) {
        console.error('Error al obtener ID de la unidad de empaque:', error);
        return null;
    }
}
// Función para confirmar la compra con mensaje de confirmación
async function confirmarCompra() {
    Swal.fire({
        title: '¿Estás seguro de registrar esta compra?',
        text: 'No podrás deshacer esta acción',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sí, registrar',
        cancelButtonText: 'Cancelar'
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                // Obtener datos del formulario
                const ID_Empleado = document.getElementById('ID_Empleado').value;
                const ID_Sucursal = document.getElementById('ID_Sucursal').value;
                const ID_Proveedor = document.getElementById('ID_Proveedor').value;
                const fechaCompra = document.getElementById('fechaCompra').value;

                // Validar que los campos principales no estén vacíos
                if (!ID_Empleado || !ID_Sucursal || !ID_Proveedor || !fechaCompra) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Campos incompletos',
                        text: 'Por favor, completa todos los campos obligatorios antes de registrar la compra.'
                    });
                    return;
                }

                // Obtener detalles de los productos de la tabla
                const productos = [];
                const filasProductos = document.querySelectorAll('#tablaProductosAgregados tbody tr');

                if (filasProductos.length === 0) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Sin productos',
                        text: 'Por favor, agrega al menos un producto antes de registrar la compra.'
                    });
                    return;
                }

                for (const fila of filasProductos) {
                    const nombreProducto = fila.cells[0].textContent.trim();
                    const nombreUnidadEmpaque = fila.cells[1].textContent.trim();

                    // Obtener ID del producto y unidad de empaque
                    const idProducto = await obtenerIDProducto(nombreProducto);
                    const idUnidadEmpaque = await obtenerIDUnidadEmpaque(nombreUnidadEmpaque);

                    // Validar si se obtuvieron los IDs correctamente
                    if (idProducto && idUnidadEmpaque) {
                        const producto = {
                            ID_Producto: idProducto,
                            ID_Unidad_Empaque: idUnidadEmpaque,
                            cantidadEmpaque: fila.cells[2].textContent.trim(),
                            cantidadUnitario: fila.cells[3].textContent.trim(),
                            precioUnitario: fila.cells[4].textContent.trim(),
                            fechaVencimiento: fila.cells[5].textContent.trim()
                        };
                        productos.push(producto);
                    } else {
                        throw new Error('No se pudo obtener el ID del producto o de la unidad de empaque');
                    }
                }

                // Construir objeto a enviar
                const data = {
                    ID_Empleado,
                    ID_Sucursal,
                    ID_Proveedor,
                    fechaCompra,
                    productos
                };

                // Enviar datos al servidor
                const response = await fetch('/nueva_compra', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    const responseData = await response.json();
                    console.log('Respuesta del servidor:', responseData);
                    Swal.fire({
                        icon: 'success',
                        title: 'Compra registrada',
                        text: 'La compra ha sido registrada exitosamente.'
                    }).then(() => {
                        location.reload(); // Recarga la página actual después de registrar
                    });
                } else {
                    throw new Error('Error al registrar compra');
                }
            } catch (error) {
                console.error('Error al enviar datos de compra:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Hubo un problema al intentar registrar la compra. Por favor intenta de nuevo.'
                });
            }
        }
    });
}

// Función para cancelar la compra con mensaje de confirmación
function cancelarCompra() {
    Swal.fire({
        title: '¿Estás seguro de cancelar la compra?',
        text: 'Se perderán todos los datos ingresados',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sí, cancelar',
        cancelButtonText: 'Continuar'
    }).then((result) => {
        if (result.isConfirmed) {
            location.reload(); // Recargar la página para cancelar la compra
        }
    });
}

</script>



<script>
document.addEventListener('DOMContentLoaded', async function() {
    const ID_SucursalSelect = document.getElementById('ID_Sucursal');

    try {
        const response = await fetch('/obtener_sucursales');
        if (response.ok) {
            const sucursales = await response.json();
            mostrarSucursales(sucursales);
        } else {
            throw new Error('Error al obtener sucursales');
        }
    } catch (error) {
        console.error('Error al obtener sucursales:', error);
    }
});

function mostrarSucursales(sucursales) {
    const ID_SucursalSelect = document.getElementById('ID_Sucursal');

    sucursales.forEach(sucursal => {
        const option = document.createElement('option');
        option.value = sucursal.ID_Sucursal; // Ajusta esto según la estructura de tu objeto sucursal
        option.textContent = sucursal.Nombre; // Ajusta esto según el formato de tus datos de sucursal
        ID_SucursalSelect.appendChild(option);
    });

    
}

</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        fetch('/obtener_proveedores')
            .then(response => response.json())
            .then(proveedores => {
                const proveedorSelect = document.getElementById('ID_Proveedor');
                proveedores.forEach(proveedor => {
                    const option = document.createElement('option');
                    option.value = proveedor.ID_Proveedor;
                    option.textContent = proveedor.Nombre;
                    proveedorSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error al cargar los proveedores:', error);
            });
    });
</script>

</body>
</html>
