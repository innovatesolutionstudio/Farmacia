<!DOCTYPE html>
<html lang="es">
    <head>
        <link rel="shortcut icon" href="#" />
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport"
            content="width=device-width,initial-scale=1,user-scalable=no" />
        <title>Registro de Compras</title>

        <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/sweetalert2@10.0.2/dist/sweetalert2.min.css" />
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <link rel="stylesheet" href="resources/css/FormularioComVen.css" />

   
    </head>
<style>
 
</style>
  <body>
    <form id="detallesVentaForm" action="/nueva_venta" method="POST"></form>

      <div class="header-container">
        <div class="breadcrumb">
            <a href="/vista_ventas" class="reporte-link "><h1
                    style="color: #858B92; font-weight: bold; margin-right: 5px;">Ventas</h1></a>
            <h2 style="font-size: 40px; margin: 0 10px;">›</h2>
            <h1 style="font-weight: bold;">Nueva Venta</h1>
            <!--recuperar nombre de la caja seleccionada-->
        </div>
        <div class="button-container">

            <a type="button" onclick="confirmarVenta()" class="btn btn-group btn-success">
                <img src="resources/images/iconos/venta.svg" alt="Crear">&nbsp;Registrar Venta</a>

            <a type="button" onclick="cancelarCompra()" class="btn btn-group btn-danger">
                <img src="resources/images/iconos/cancel.svg" alt="Crear">&nbsp;Cancelar Venta</a>

        </div>
      </div>
      <h2>Datos del Cliente</h2>
      <div class="container mt-3">
        <input type="text" class="form-control" id="ID_Empleado" name="ID_Empleado" maxlength="30" required hidden value="<%= ID_Empleado %>" readonly>
        <input type="text" class="form-control" id="ID_Sucursal" name="ID_Sucursal" maxlength="30" required hidden value="<%= ID_Sucursal %>" readonly>
        <input type="text" class="form-control" id="ID_Caja" name="ID_Caja" maxlength="30" required hidden value="<%= ID_Caja %>" readonly>
  
        <div class="form-group">
          <label for="carnet" class="form-label">Carnet:</label>
          <input type="number" class="form-control" id="carnet" name="carnet" required>
         
        </div>
        
      
              
          
        <div class="form-group">
          <label for="nit" class="form-label">Nit:</label>
          <input type="number" class="form-control" id="nit" name="nit" required>
        </div>
        <div class="form-group">
          <label for="apellido">Apellido del cliente :</label>
          <input type="text" class="form-control" id="apellido" name="apellido" maxlength="30" required>
        </div>
        <div class="form-group">
          <label for="nombre" >Nombre del cliente:</label>
          <input type="text" class="form-control" id="nombre" name="nombre" maxlength="30" required>
        </div>
        
        <div class="form-group">
          <label for="fechaVenta" class="form-label">Fecha:</label>
          <input type="date" class="form-control" style="background-color:#ffffff; color: rgb(0, 0, 0);"
                id="fechaVenta" name="fechaVenta" readonly>
        </div>
      </div>
      <br>
      <h2>Detalles de los productos</h2>
      <div class="container">
        <div class="form-group position-relative">
          <label for="productoFiltro">Buscar Producto:</label>
          <input type="text" class="form-control" id="productoFiltro" placeholder="Buscar producto..." autocomplete="off" />
          <div id="dropdownProductos"></div>
        </div>
      
        <div class="form-group">
          <label for="codigoproducto">Código del producto</label>
          <input type="text" class="form-control" id="codigoproducto" placeholder="Ingrese el código"/>
        </div>
      </div>
    
      <div class="container3">

        <div class="form-group">
          <label for="cantidadInventario" class="form-label">Cantidad en inventario:</label>
          <input type="number" class="form-control" id="cantidadInventario" placeholder="Cargando..." readonly
                value="Cargando..." />
        </div>
        <div class="form-group">  
          <label for="cantidad" class="form-label">Cantidad:</label>
          <input type="number" class="form-control" id="cantidad" min="1" placeholder="Cantidad" />   
        </div>
        <div class="form-group">

          <label for="total" class="form-label">Total a pagar:</label>
          <input type="text" class="form-control" style="background-color:#407787; color: rgb(255, 255, 255);"
            id="total" name="total" readonly>
        </div>

        <div class="form-group">
          <label for="total" >Agregar producto:</label>

          <button type="button" class="button" id="agregarProducto">
            <span class="button__text">Agregar Producto</span>
            <span class="button__icon"><svg xmlns="http://www.w3.org/2000/svg" width="" viewBox="0 0 24 24" stroke-width="2" stroke-linejoin="round" stroke-linecap="round" stroke="currentColor" fill="none" class="svg"><line y2="19" y1="5" x2="12" x1="12"></line><line y2="12" y1="12" x2="19" x1="5"></line></svg></span>
          </button>
        </div>
      </div>
      <br>
      <div class="card3">
        <div class="header-card1">
          <span>Productos Agregados</span>
        </div>
        <div class="content-card-formulario">
          <table class="table-formulario" id="tablaProductosAgregados">
              <thead >
                <tr>
                  <th>ID_Producto</th>
                  <th>Producto</th>
                  <th>Unidad de Venta</th>
                  <th>Cantidad</th>
                  <th>Precio</th>
                  <th>Subtotal</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                <!-- Aquí se agregarán los productos -->
              </tbody>
            </table>
          </div>

        </form>
      </div>
  </body>
  <script>
    document.getElementById("carnet").addEventListener("input", async function () {
      const carnet = this.value.trim();
      
      if (carnet.length > 0) {
        try {
          const response = await fetch("/buscar_cliente_por_carnet", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ carnet }),
          });
    
          if (response.ok) {
            const cliente = await response.json();
            // Completar los campos con los datos del cliente
            document.getElementById("nombre").value = cliente.Nombre;
            document.getElementById("apellido").value = cliente.Apellido;
            document.getElementById("nit").value = cliente.Nit || ""; // Si no tiene Nit, dejar vacío
          } else if (response.status === 404) {
            // Limpiar los campos si no se encuentra el cliente
            document.getElementById("nombre").value = "";
            document.getElementById("apellido").value = "";
            document.getElementById("nit").value = "";
            // No mostrar ninguna alerta
          }
        } catch (error) {
          console.error("Error al buscar cliente por carnet:", error);
          alert("Error al buscar cliente. Por favor, intenta nuevamente.");
        }
      } else {
        // Limpiar los campos si el input está vacío
        document.getElementById("nombre").value = "";
        document.getElementById("apellido").value = "";
        document.getElementById("nit").value = "";
      }
    });
    </script>
    
  <script>
    $(document).ready(function () {
      $('#cantidad').on('input', function () {
        const cantidadInventario = parseInt($('#cantidadInventario').val(), 10);
        const cantidad = parseInt($(this).val(), 10);

        if (cantidad > cantidadInventario) {
          Swal.fire({
            icon: 'error',
            title: 'Cantidad Excedida',
            text: 'La cantidad ingresada excede la cantidad disponible en inventario.',
          });
          $(this).val(cantidadInventario);
        }
      });

      $('#ventaForm').on('submit', function (event) {
        const cantidadInventario = parseInt($('#cantidadInventario').val(), 10);
        const cantidad = parseInt($('#cantidad').val(), 10);

        if (cantidad > cantidadInventario) {
          event.preventDefault();
          Swal.fire({
            icon: 'error',
            title: 'Cantidad Excedida',
            text: 'La cantidad ingresada excede la cantidad disponible en inventario.',
          });
        }
      });
    });
  </script>
  <script>
    function enviarVenta() {
      const ID_Empleado = document.getElementById("ID_Empleado").value;
      const ID_Sucursal = document.getElementById("ID_Sucursal").value;
      const ID_Caja = document.getElementById("ID_Caja").value;
      const nombre = document.getElementById("nombre").value;
      const apellido = document.getElementById("apellido").value;
      const nit = document.getElementById("nit").value;
      const carnet = document.getElementById("carnet").value;
      const fechaVenta = document.getElementById("fechaVenta").value;
      const detallesVenta = {
        ID_Empleado: ID_Empleado,
        ID_Sucursal: ID_Sucursal,
        ID_Caja: ID_Caja,
        nombre: nombre,
        apellido: apellido,
        carnet: carnet,
        nit: nit,
        fechaVenta: fechaVenta,
        productos: [],
        cantidades: [],
      };

      const tablaProductos = document.getElementById(
        "tablaProductosAgregados"
      );

      const filasProductos = tablaProductos.querySelectorAll("tbody tr");

      filasProductos.forEach((fila) => {
        const celdas = fila.cells;
        const idProducto = celdas[0].dataset.id;
        const cantidad = celdas[3].textContent;
        detallesVenta.productos.push(idProducto);
        detallesVenta.cantidades.push(cantidad);
      });
      if (detallesVenta.productos.length > 0) {
        enviarDetallesVenta(detallesVenta);
      } else {
        console.error("No hay detalles de venta para enviar");
      }
    }

    async function enviarDetallesVenta(detallesVenta) {
      try {
        const response = await fetch("/nueva_venta", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(detallesVenta),
        });
        if (response.ok) {
          const data = await response.json();
          console.log(data);
        } else {
          console.error("Error en la solicitud:", response.statusText);
        }
      } catch (error) {
        console.error("Error al procesar la solicitud:", error);
      }
    }
  </script>
  <script>
    async function handleSubmit(event) {
      event.preventDefault();
      const ID_Empleado = document.getElementById("ID_Empleado").value;
      const ID_Sucursal = document.getElementById("ID_Sucursal").value;
      const ID_Caja = document.getElementById("ID_Caja").value;
      const nombre = document.getElementById("nombre").value;
      const apellido = document.getElementById("apellido").value;
      const carnet = document.getElementById("carnet").value;
      const nit = document.getElementById("nit").value;
      const fechaVenta = document.getElementById("fechaVenta").value;
      const detallesVenta = {
        ID_Empleado: ID_Empleado,
        ID_Sucursal: ID_Sucursal,
        ID_Caja: ID_Caja,
        nombre: nombre,
        apellido: apellido,
        carnet: carnet,
        nit: nit,
        fechaVenta: fechaVenta,
        productos: [],
        cantidades: [],
      };
      const filasProductos = document.querySelectorAll(
        "#tablaProductosAgregados tbody tr"
      );
      filasProductos.forEach((fila) => {
        const idProducto = parseInt(
          fila.querySelector("td:first-child").textContent
        );
        const cantidad = parseInt(
          fila.querySelector("td:nth-child(4)").textContent
        );
        detallesVenta.productos.push(idProducto);
        detallesVenta.cantidades.push(cantidad);
      });
      if (detallesVenta.productos.length > 0) {
        await enviarDetallesVenta(detallesVenta);
      } else {
        console.error("No hay detalles de venta para enviar");
      }
    }
    document.getElementById("detallesVentaForm").addEventListener("submit", handleSubmit);
  </script>


<script>
let productos = [];
let productoSeleccionado = null;

// Obtener todos los productos al cargar la página
async function obtenerProductos() {
  try {
    const response = await fetch("/obtener_productos_inventario");
    if (!response.ok) {
      throw new Error("Error al obtener los productos");
    }
    productos = await response.json();
  } catch (error) {
    console.error("Error al obtener los productos del inventario:", error);
  }
}

// Filtrar productos por nombre y mostrar en el dropdown
function filtrarProductos() {
  const filtro = document.getElementById("productoFiltro").value.toLowerCase();
  const dropdownProductos = document.getElementById("dropdownProductos");
  dropdownProductos.innerHTML = ""; // Limpia el contenido anterior

  const productosFiltrados = productos.filter((producto) =>
    producto.Nombre.toLowerCase().includes(filtro)
  );

  if (productosFiltrados.length > 0) {
    productosFiltrados.forEach((producto) => {
      const item = document.createElement("div");
      item.className = "dropdown-item";
      item.textContent = `${producto.Nombre} (${producto.Unidad_Venta})`;
      item.dataset.idProducto = producto.ID_Producto;
      item.addEventListener("click", async function () {
        await seleccionarProducto(producto);
      });
      dropdownProductos.appendChild(item);
    });
    dropdownProductos.style.display = "block"; // Muestra el dropdown
  } else {
    dropdownProductos.style.display = "none"; // Oculta el dropdown si no hay resultados
  }
}

// Buscar un producto por código y seleccionarlo
async function buscarProductoPorCodigo(codigo) {
  try {
    const response = await fetch("/buscar_producto_por_codigo", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ codigo }),
    });

    if (response.ok) {
      const producto = await response.json();

      // Buscar el producto por nombre en el inventario y seleccionarlo
      const productoInventario = productos.find(
        (p) => p.Nombre.toLowerCase() === producto.nombreProducto.toLowerCase()
      );

      if (productoInventario) {
        await seleccionarProducto(productoInventario);
      } else {
        alert("El producto no está en el inventario actual.");
      }
    } else {
      console.log("Producto no encontrado para el código ingresado.");
    }
  } catch (error) {
    console.error("Error al buscar producto por código:", error);
  }
}

// Seleccionar producto del dropdown o por código y mostrar detalles
async function seleccionarProducto(producto) {
  try {
    const precio = await obtenerPrecioProducto(producto.ID_Producto);
    const cantidadInventario = await obtenerCantidadInventario(producto.ID_Producto);
    if (precio !== null && cantidadInventario !== null) {
      document.getElementById("productoFiltro").value = producto.Nombre;
      document.getElementById("cantidadInventario").value = cantidadInventario;
      productoSeleccionado = {
        ...producto,
        Precio_Unitario: precio,
        Cantidad_Inventario: cantidadInventario
      };
      document.getElementById("dropdownProductos").style.display = "none"; // Oculta el dropdown después de seleccionar
    } else {
      alert("Error al obtener los detalles del producto");
    }
  } catch (error) {
    console.error("Error al seleccionar producto:", error);
  }
}

// Obtener la cantidad en inventario de un producto específico
async function obtenerCantidadInventario(idProducto) {
  try {
    const response = await fetch(`/obtener_cantidad_inventario/${idProducto}`);
    if (!response.ok) {
      throw new Error("Error al obtener la cantidad en inventario del producto");
    }
    const data = await response.json();
    return data.cantidad;
  } catch (error) {
    console.error("Error al obtener la cantidad en inventario del producto:", error);
    return null;
  }
}

// Obtener el precio de un producto específico
async function obtenerPrecioProducto(idProducto) {
  try {
    const response = await fetch(`/obtener_precio_producto/${idProducto}`);
    if (!response.ok) {
      throw new Error("Error al obtener el precio del producto");
    }
    const data = await response.json();
    return data.precio;
  } catch (error) {
    console.error("Error al obtener el precio del producto:", error);
    return null;
  }
}
// Agregar el producto seleccionado a la tabla de productos agregados
document.getElementById("agregarProducto").addEventListener("click", function () {
  const cantidadInput = document.getElementById("cantidad");
  const cantidad = parseInt(cantidadInput.value, 10);

  // Validar si ya existe el producto en la tabla
  const tablaProductosAgregados = document.getElementById("tablaProductosAgregados").querySelector("tbody");
  const filasProductos = tablaProductosAgregados.querySelectorAll("tr");
  let productoDuplicado = false;

  filasProductos.forEach((fila) => {
    const idProductoEnTabla = fila.querySelector("td:first-child").textContent.trim();
    if (idProductoEnTabla === productoSeleccionado.ID_Producto.toString()) {
      productoDuplicado = true;
    }
  });

  if (productoDuplicado) {
    Swal.fire({
      icon: 'warning',
      title: 'Producto duplicado',
      text: 'Este producto ya ha sido agregado. Si necesitas cambiar la cantidad, primero elimínalo.',
    });
    return; // Detener el proceso si el producto ya existe
  }

  if (productoSeleccionado && cantidad && cantidad > 0 && cantidad <= productoSeleccionado.Cantidad_Inventario) {
    const precio = productoSeleccionado.Precio_Unitario;
    const subtotal = cantidad * precio;

    const nuevaFila = document.createElement("tr");
    nuevaFila.innerHTML = `
        <td data-id="${productoSeleccionado.ID_Producto}">${productoSeleccionado.ID_Producto}</td>
        <td>${productoSeleccionado.Nombre}</td>
        <td>${productoSeleccionado.Unidad_Venta}</td>
        <td>${cantidad}</td>
        <td>${precio.toFixed(2)}</td>
        <td>${subtotal.toFixed(2)}</td>
        <td><button class="btn btn-danger eliminarProducto">Eliminar</button></td>
    `;

    tablaProductosAgregados.appendChild(nuevaFila);

    // Limpiar campos después de agregar
    document.getElementById("productoFiltro").value = "";
    cantidadInput.value = "";
    document.getElementById("cantidadInventario").value = ""; // Limpia el campo de cantidad en inventario
    document.getElementById("codigoproducto").value = ""; // Limpia el campo de código del producto
    productoSeleccionado = null;

    // Añadir evento de eliminación para la nueva fila
    nuevaFila.querySelector('.eliminarProducto').addEventListener('click', eliminarFila);

    // Calcular el total después de agregar el producto
    calcularTotal();
  } else {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Por favor, selecciona un producto y una cantidad válida que no exceda el inventario.',
    });
  }
});

// Eliminar una fila de la tabla de productos agregados
function eliminarFila(event) {
  const fila = event.target.closest('tr');
  fila.remove();
  calcularTotal();
}

// Calcular el total de todos los productos agregados
function calcularTotal() {
  let total = 0;
  const filasProductos = document.querySelectorAll("#tablaProductosAgregados tbody tr");
  filasProductos.forEach((fila) => {
    const subtotal = parseFloat(fila.cells[5].textContent);
    total += subtotal;
  });
  document.getElementById("total").value = total.toFixed(2);
}

// Event listeners para filtrar productos y ocultar el dropdown cuando pierda foco
document.getElementById("productoFiltro").addEventListener("input", filtrarProductos);
document.getElementById("productoFiltro").addEventListener("blur", function () {
  setTimeout(() => {
    document.getElementById("dropdownProductos").style.display = "none";
  }, 200);
});

// Detectar código ingresado en el campo de código del producto
document.getElementById("codigoproducto").addEventListener("input", function () {
  const codigo = this.value;
  if (codigo.trim().length > 0) {
    buscarProductoPorCodigo(codigo);
  }
});

// Llamar a la función obtenerProductos al cargar la página
obtenerProductos();

</script>


  <script>
    function calcularTotal() {
      let total = 0;
      const filasProductos = document.querySelectorAll("#tablaProductosAgregados tbody tr");
      filasProductos.forEach((fila) => {
        const subtotal = parseFloat(fila.cells[5].textContent);
        total += subtotal;
      });
      document.getElementById("total").value = total.toFixed(2);
    }
    window.onload = calcularTotal;
    document.getElementById("agregarProducto").addEventListener("click", function () {
      calcularTotal();
    });

    const fechaVentaInput = document.getElementById('fechaVenta');
    const hoy = new Date().toLocaleDateString('en-CA', {
        timeZone: 'America/La_Paz',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
    }).replace(/\//g, '-'); // Reemplaza / con - para formato YYYY-MM-DD
    fechaVentaInput.value = hoy;



    const nitInput = document.getElementById('nit');
    nitInput.addEventListener('keyup', function () {
      this.value = this.value.slice(0, 15);
    });


    const ciInput = document.getElementById('carnet');
    ciInput.addEventListener('keyup', function () {
      this.value = this.value.slice(0, 12);
    });
    const carnetInput = document.getElementById('carnet');
    const copyButton = document.getElementById('copyButton');
    copyButton.addEventListener('click', function () {
      nitInput.value = carnetInput.value;
    });
  </script>
      
  <script>
    function confirmarVenta() {
      const ID_Empleado = document.getElementById("ID_Empleado").value;
      const ID_Sucursal = document.getElementById("ID_Sucursal").value;
      const ID_Caja = document.getElementById("ID_Caja").value;
      const nombre = document.getElementById("nombre").value;
      const apellido = document.getElementById("apellido").value;
      const nit = document.getElementById("nit").value;
      const carnet = document.getElementById("carnet").value;
      const fechaVenta = document.getElementById("fechaVenta").value;
      const total = document.getElementById("total").value;

      if (!ID_Empleado.trim() || !ID_Sucursal.trim() || !ID_Caja.trim() || !nombre.trim() || !apellido.trim() 
      || !carnet.trim() || !fechaVenta.trim() || !total.trim()) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Por favor, complete todos los campos obligatorios.'
        });
        return;
      }
      const detallesVenta = {
        ID_Empleado: ID_Empleado,
        ID_Sucursal: ID_Sucursal,
        ID_Caja: ID_Caja,
        nombre: nombre,
        apellido: apellido,
        carnet: carnet,
        nit: nit,
        fechaVenta: fechaVenta,
        productos: [],
        nombres: [],
        cantidades: [],
        precio: [],
      };

      const filasProductos = document.querySelectorAll("#tablaProductosAgregados tbody tr");

      filasProductos.forEach((fila) => {
        const celdas = fila.cells;
        const idProducto = celdas[0].dataset.id;
        const cantidad = celdas[3].textContent;
        const precio = parseFloat(celdas[4].textContent);
        const nombreProducto = celdas[1].textContent;
        detallesVenta.nombres.push(nombreProducto);
        detallesVenta.productos.push(idProducto);
        detallesVenta.cantidades.push(cantidad);
        detallesVenta.precio.push(precio);
      });

      const detallesHTMLPromises = detallesVenta.nombres.map(async (nombreProducto, index) => {
        const precio = parseFloat(detallesVenta.precio[index]); 
        if (!isNaN(precio)) {
          return `
                <tr>
                    <td>${detallesVenta.cantidades[index]}</td>
                    <td>${nombreProducto}</td> <!-- Cambio aquí -->
                    <td>${precio.toFixed(2)} bs</td>
                    <td>${(precio * detallesVenta.cantidades[index]).toFixed(2)} bs</td>
                </tr>
            `;
        } else {
          return `<tr><td colspan="4">Error al obtener el precio del producto ${nombreProducto}</td></tr>`;
        }
      });


      Promise.all(detallesHTMLPromises)
        .then((detallesHTML) => {
          const detallesHTMLString = detallesHTML.join('');
          const totalVenta = total;
          const htmlContent = `
                <div style="display: flex;">
                    <div style="flex: 2; text-align: left;">
                        <p><strong>Vendedor:</strong> ${ID_Empleado}</p>
                        <p><strong>Sucursal:</strong> ${ID_Sucursal}</p>
                        <p><strong>Caja:</strong> ${ID_Caja}</p>
                        <p><strong>Cliente:</strong> ${nombre} ${apellido}</p>
                        <p><strong>NIT:</strong> ${nit}</p>
                        <p><strong>Carnet:</strong> ${carnet}</p>
                        <p><strong>Fecha de Venta:</strong> ${fechaVenta}</p>
                        <hr>
                        <p><strong>Detalles:</strong></p>
                        <table style="width:100%">
                            <tr>
                                <th>Cantidad</th>
                                <th>Producto</th>
                                <th>Precio Unitario</th>
                                <th>Subtotal</th>
                            </tr>
                            ${detallesHTMLString}
                        </table>
                    </div>
                    <div style="flex: 1; text-align: center;">
                        <img src="resources/images/firmas/qr.jpg" alt="Imagen de venta" style="max-width: 90%;">
                        <p><strong>Total a pagar:</strong> ${totalVenta}</p>
                    </div>
                </div>
            `;
          Swal.fire({
            title: 'Confirmar Venta',
            html: htmlContent,
            width: '1200px', 
            height: '800px',
            showCancelButton: true,
            confirmButtonText: '<img class="icono" src="resources/images/iconos/venta.svg" alt="Crear"> Confirmar venta / Imprimir Recibo &nbsp;<img class="icono" src="resources/images/iconos/print.svg" alt="Crear">',
            confirmButtonColor: '#28a745', 
            cancelButtonText: '<img class="icono" src="resources/images/iconos/cancel.svg" alt="Crear"> &nbsp;Cancelar',
            cancelButtonColor: '#dc3545',
          }).then((result) => {
            if (result.isConfirmed) {
              Swal.fire({
                title: '¿Estás seguro?',
                text: "¿Quieres proceder con la venta e imprimir el recibo?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, proceder',
                cancelButtonText: 'No, cancelar'
              }).then((confirmResult) => {
                if (confirmResult.isConfirmed) {
                  enviarVenta();
                  imprimirFactura({
                    ID_Empleado,
                    ID_Sucursal,
                    ID_Caja,
                    nombre,
                    apellido,
                    nit,
                    carnet,
                    fechaVenta,
                    detalles: detallesVenta.nombres.map((nombreProducto, index) => ({
                      cantidad: detallesVenta.cantidades[index],
                      producto: nombreProducto,
                      precio: detallesVenta.precio[index],
                      subtotal: detallesVenta.precio[index] * detallesVenta.cantidades[index]
                    })),
                    totalVenta
                  });
                }
              });
            }
          });
        })
        .catch((error) => {
          console.error('Error al construir el HTML:', error);
        });
    }

    function imprimirFactura(datosFactura) {
      fetch('/generar_factura', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(datosFactura)
        })
        .then(response => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error('Error al generar la factura');
          }
        })
        .then(data => {
          Swal.fire({
            title: 'Recibo generada',
            text: 'El recibo se ha generado correctamente.',
            icon: 'success',
            confirmButtonText: 'OK'
          }).then(() => {
            window.open(data.url, '_blank');
            window.location.reload();
          });
        })
        .catch(error => {
          console.error('Error al generar el Recibo:', error);
          Swal.fire({
            title: 'Error',
            text: 'Error al generar el recibo',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        });
    }
  </script>


<script>
    document.getElementById('buscar-medicamento-btn').addEventListener('click', () => {
        Swal.fire({
            title: '¿Tiene alguna duda?, busque medicamento o sintoma',
            html: `
                <div class="p-3">
                    <form id="buscador-form" class="form-inline">
                        <div class="input-group w-100">
                            <input type="text" id="medicamento" class="form-control" placeholder="Ingrese su pregunta aqui" required>
                            <div class="input-group-append">
                                <button type="submit" class="btn btn-primary">Buscar</button>
                            </div>
                        </div>
                    </form>
                    <div class="progress mt-3" style="height: 25px;">
                        <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                    </div>
                    <div id="resultado" class="mt-3" style="text-align: justify;"></div>
                </div>
            `,
            width: '70%', // Ajusta el tamaño de la alerta
            showConfirmButton: false,
            didOpen: () => {
                // Buscador de Medicamentos por Nombre
                document.getElementById('buscador-form').addEventListener('submit', async (e) => {
                    e.preventDefault();

                    const medicamento = document.getElementById('medicamento').value;
                    const progressBar = document.getElementById('progress-bar');

                    // Simular el progreso durante la solicitud
                    let progress = 0;
                    const interval = setInterval(() => {
                        if (progress < 90) { // Se detiene en 90% hasta que se complete la solicitud
                            progress += 1;
                            progressBar.style.width = `${progress}%`;
                            progressBar.innerText = `${progress}%`;
                            progressBar.setAttribute('aria-valuenow', progress);
                        }
                    }, 200); // Ajusta la velocidad de la animación

                    try {
                        const response = await fetch('/buscar', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ medicamento }),
                        });

                        const data = await response.json();

                        clearInterval(interval); // Detener la animación de progreso
                        progressBar.style.width = '100%';
                        progressBar.innerText = '100%';
                        progressBar.setAttribute('aria-valuenow', 100);

                        document.getElementById('resultado').innerText = data.informacion;
                    } catch (error) {
                        clearInterval(interval); // Detener la animación de progreso en caso de error
                        progressBar.style.width = '100%';
                        progressBar.innerText = 'Error';
                        progressBar.classList.add('bg-danger');
                        document.getElementById('resultado').innerText = 'Error al buscar el medicamento';
                    }
                });
            }
        });
    });
</script>
</html>
