<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recibo de Venta - Farmacia</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .sales-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .sales-header {
            border-bottom: 1px solid #eee;
            padding-bottom: 1rem;
            margin-bottom: 1rem;
        }

        .sale-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .detail-item strong {
            font-size: 0.875rem;
            color: #666;
        }

        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem;
        }

        .status-pending {
            background-color: #fef3c7;
            color: #92400e;
        }

        .products-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        .products-table th,
        .products-table td {
            padding: 0.75rem 1rem;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .products-table th {
            background-color: #f9fafb;
            font-weight: 600;
        }

        .product-image {
            width: 40px;
            height: 40px;
            border-radius: 4px;
            object-fit: cover;
        }

        .total-section {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 2rem;
            padding-top: 1rem;
            border-top: 1px solid #eee;
        }

        .confirm-btn {
            padding: 0.5rem 1.5rem;
            background-color: #16a34a;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        .confirm-btn:hover {
            background-color: #15803d;
        }

        .confirm-btn:disabled {
            background-color: #d1d5db;
            cursor: not-allowed;
        }

        .error-message {
            padding: 1rem;
            background-color: #fee2e2;
            border: 1px solid #fecaca;
            border-radius: 6px;
            color: #dc2626;
            margin-bottom: 1rem;
            display: none;
        }

        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 6px;
            display: none;
        }

        .alert-error {
            background-color: #fee2e2;
            border: 1px solid #fecaca;
            color: #dc2626;
        }

        .alert-success {
            background-color: #dcfce7;
            border: 1px solid #bbf7d0;
            color: #16a34a;
        }
    </style>
</head>
<body>
    <div class="sales-container">
        <div id="errorAlert" class="alert alert-error"></div>
        <div id="successAlert" class="alert alert-success"></div>

        <div class="sales-header">
            <h1>Datos Recibo</h1>
            <div class="sale-details">
                <div class="detail-item">
                    <strong>ID Venta:</strong>
                    <span id="saleId"></span>
                </div>
                <div class="detail-item">
                    <strong>Fecha:</strong>
                    <span id="saleDate"></span>
                </div>
                <div class="detail-item">
                    <strong>Cliente:</strong>
                    <input type="text" id="clientNameInput" placeholder="Ingrese nombre del cliente">
                </div>
                <div class="detail-item">
                    <strong>Sucursal:</strong>
                    <span id="branchName"></span>
                    <input type="hidden" id="sucursalId" value="">
                </div>
                <div class="detail-item">
                    <strong>Estado:</strong>
                    <span id="saleStatus" class="status-badge status-pending">Pendiente</span>
                </div>
            </div>
        </div>

        <table class="products-table">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Precio Unitario</th>
                    <th>Subtotal</th>
                </tr>
            </thead>
            <tbody id="productsTableBody">
                <!-- Los productos se cargarán dinámicamente -->
            </tbody>
        </table>

        <div class="total-section">
            <div>
                <h3>Total de la Venta: <span id="totalAmount">Bs. 0.00</span></h3>
            </div>
            <button id="confirmBtn" class="confirm-btn" onclick="confirmarVenta()">
                Confirmar Venta
            </button>
        </div>
    </div>

    <script>
        function insertarVenta() {
            const carrito = obtenerCarritoLocal();
            const totalVenta = calcularTotalVenta(carrito);
            const fechaVenta = new Date().toISOString().slice(0, 19).replace('T', ' '); // Fecha en formato 'YYYY-MM-DD HH:MM:SS'
            
            const venta = {
                fechaVenta: fechaVenta,
                totalVenta: totalVenta,
                idCliente: "", // Aquí puedes poner el ID del cliente si es necesario
                idEmpleado: 1, // Este es solo un ejemplo, asegúrate de obtener el ID del empleado
                idSucursal: 2,
                idCaja: 1,
                estado: 1
            };

            const query = `
                INSERT INTO ventas (Fecha_Venta, Total_Venta, ID_Cliente, ID_Empleado, ID_Sucursal, ID_Caja, Estado)
                VALUES ('${venta.fechaVenta}', ${venta.totalVenta}, '${venta.idCliente}', ${venta.idEmpleado}, '${venta.idSucursal}', ${venta.idCaja}, '${venta.estado}')
            `;

            pool.query(query, (error, results) => {
                if (error) {
                    console.error("Error al insertar venta:", error);
                    mostrarError("Hubo un error al procesar la venta.");
                } else {
                    mostrarExito("Venta realizada con éxito.");
                }
            });
        }

        // Función para generar ID de venta con fecha
        function generateSaleId() {
            const date = new Date();
            const dateStr = date.getFullYear() + ('0' + (date.getMonth() + 1)).slice(-2) + ('0' + date.getDate()).slice(-2); // "20241116"
            const randomNumber = Math.floor(Math.random() * 100000); // 5 dígitos aleatorios
            return dateStr + '-' + randomNumber; // Ejemplo: 20241116-12345
        }

        // Función para cargar los datos iniciales
            function cargarDatosVenta() {
                // Establecer fecha actual
                document.getElementById('saleDate').textContent = new Date().toLocaleDateString();

                // Generar y establecer ID de venta
                document.getElementById('saleId').textContent = generateSaleId();

                // Cargar datos de sucursal
                const sucursal = localStorage.getItem('sucursalSeleccionada');
                if (sucursal) {
                    const sucursalData = JSON.parse(sucursal);
                    document.getElementById('branchName').textContent = sucursalData.nombre;
                    document.getElementById('sucursalId').value = sucursalData.id;
                }

                // Obtener el nombre del cliente desde localStorage
                const clienteNombre = localStorage.getItem('clienteNombre');
                if (clienteNombre) {
                    document.getElementById('clientNameInput').value = clienteNombre; // Mostrar el nombre del cliente en el campo de texto
                }

                // Cargar y mostrar productos del carrito
                actualizarTablaProductos();
            }


        // Función para actualizar la tabla de productos
        function actualizarTablaProductos() {
            const carrito = obtenerCarritoLocal();
            const tbody = document.getElementById('productsTableBody');
            tbody.innerHTML = '';

            carrito.forEach(item => {
                const tr = document.createElement('tr');
                const subtotal = item.price * item.quantity;
                
                tr.innerHTML = `
                    <td>
                        <div style="display: flex; align-items: center; gap: 0.75rem;">
                            <img src="${item.image || '/api/placeholder/40/40'}" 
                                 alt="${item.name}" 
                                 class="product-image">
                            <span>${item.name}</span>
                        </div>
                    </td>
                    <td>${item.quantity}</td>
                    <td>Bs. ${item.price}</td>
                    <td>Bs. ${subtotal.toFixed(2)}</td>
                `;
                tbody.appendChild(tr);
            });

            document.getElementById('totalAmount').textContent = `Bs. ${calcularTotalVenta(carrito).toFixed(2)}`;
        }

        function obtenerCarritoLocal() {
            const carrito = localStorage.getItem('carrito');
            if (!carrito) {
                return []; // Retorna un array vacío si no hay carrito
            }
            return JSON.parse(carrito);
        }


        function calcularTotalVenta(carrito) {
            return carrito.reduce((total, item) => total + (item.price * item.quantity), 0);
        }

        // Función para mostrar el mensaje de éxito
        function mostrarExito(mensaje) {
            const successAlert = document.getElementById('successAlert');
            successAlert.textContent = mensaje;
            successAlert.style.display = 'block';
        }

        // Función para mostrar el mensaje de error
        function mostrarError(mensaje) {
            const errorAlert = document.getElementById('errorAlert');
            errorAlert.textContent = mensaje;
            errorAlert.style.display = 'block';
        }

        // Confirmar venta
        function confirmarVenta() {
            insertarVenta();
        }

        // Cargar datos cuando se inicie la página
        window.onload = cargarDatosVenta;
    </script>
</body>
</html>
