<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/resources/css/continuar_pedido.css" />
    <title>Recibo de Venta - Farmacia</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    
</head>
<body>
    
    <div class="sales-container">
        <div id="errorAlert" class="alert alert-error"></div>
        <div id="successAlert" class="alert alert-success"></div>

        <div class="sales-header">
            <h1>Datos Recibo</h1>
            <div class="sale-details">
                <div class="detail-item">
                    <strong>ID Venta:</strong>
                    <span id="saleId"></span>
                </div>
                <div class="detail-item">
                    <strong>Fecha:</strong>
                    <span id="saleDate"></span>
                </div>
                <div class="detail-item">
                    <strong>Cliente:</strong>
                    <input type="text" id="clientNameInput" placeholder="Ingrese nombre del cliente">
                </div>
                <div class="detail-item">
                    <strong>Sucursal:</strong>
                    <span id="branchName"></span>
                    <input type="hidden" id="sucursalId" value="">
                </div>
                <div class="detail-item">
                    <strong>Estado:</strong>
                    <span id="saleStatus" class="status-badge status-pending">Pendiente</span>
                </div>
            </div>
        </div>

        <table class="products-table">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Precio Unitario</th>
                    <th>Subtotal</th>
                </tr>
            </thead>
            <tbody id="productsTableBody">
                <!-- Los productos se cargarán dinámicamente -->
            </tbody>
        </table>

        <div class="total-section">
            <div>
                <h3>Total de la Venta: <span id="totalAmount">Bs. 0.00</span></h3>
            </div>
            <button style="font-family: 'Poppins', sans-serif;" id="confirmBtn" class="confirm-btn" onclick="confirmarVenta()">
                Confirmar Venta
            </button>
        </div>
    </div>

    <script>
        // Función para obtener los datos del carrito almacenados
function obtenerCarritoLocal() {
    const carritoJSON = localStorage.getItem('cart');
    return carritoJSON ? JSON.parse(carritoJSON) : [];
}

// Función para generar ID de venta único
function generateSaleId() {
    const date = new Date();
    const dateStr = date.getFullYear() + 
                   ('0' + (date.getMonth() + 1)).slice(-2) + 
                   ('0' + date.getDate()).slice(-2);
    const randomNumber = Math.floor(Math.random() * 100000);
    return `${dateStr}-${randomNumber}`;
}

// Función para formatear la fecha
function formatearFecha(fecha) {
    return new Date(fecha).toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// Función principal para cargar los datos del recibo
function cargarDatosRecibo() {
    // Establecer datos básicos del recibo
    document.getElementById('saleId').textContent = generateSaleId();
    document.getElementById('saleDate').textContent = formatearFecha(new Date());

    // Obtener y mostrar datos del carrito
    const carrito = obtenerCarritoLocal();
    const tbody = document.getElementById('productsTableBody');
    tbody.innerHTML = ''; // Limpiar tabla

    let totalVenta = 0;

    // Agregar cada producto a la tabla
    carrito.forEach(item => {
        const subtotal = item.price * item.quantity;
        totalVenta += subtotal;

        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>
                <div style="display: flex; align-items: center; gap: 0.75rem;">
                    <img src="/api/placeholder/40/40" 
                         alt="${item.name}" 
                         class="product-image">
                    <span>${item.name}</span>
                </div>
            </td>
            <td>${item.quantity}</td>
            <td>Bs. ${item.price.toFixed(2)}</td>
            <td>Bs. ${subtotal.toFixed(2)}</td>
        `;
        tbody.appendChild(tr);
    });

    // Actualizar total
    document.getElementById('totalAmount').textContent = `Bs. ${totalVenta.toFixed(2)}`;
}

// Función para formatear la fecha al formato 'YYYY-MM-DD HH:MM:SS'
function formatearFecha(fecha) {
    const date = new Date(fecha);
    const anio = date.getFullYear();
    const mes = String(date.getMonth() + 1).padStart(2, '0');
    const dia = String(date.getDate()).padStart(2, '0');
    const horas = String(date.getHours()).padStart(2, '0');
    const minutos = String(date.getMinutes()).padStart(2, '0');
    const segundos = String(date.getSeconds()).padStart(2, '0');
    return `${anio}-${mes}-${dia} ${horas}:${minutos}:${segundos}`;
}

// Función para confirmar la venta
async function confirmarVenta() {
    try {
        const confirmBtn = document.getElementById('confirmBtn');
        confirmBtn.disabled = true;
        
        const carrito = obtenerCarritoLocal();
        const clientName = document.getElementById('clientNameInput').value;
        const sucursalId = document.getElementById('sucursalId').value;
        
        if (!clientName.trim()) {
            throw new Error('Por favor ingrese el nombre del cliente');
        }

        const ventaData = {
            productos: carrito,
            cliente: clientName,
            sucursalId: sucursalId,
            total: calcularTotalVenta(carrito),
            fecha: formatearFecha(new Date()) // Formatear la fecha
        };

        // Realizar la inserción en la base de datos
        const response = await fetch('/ruta-para-insertar-venta', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(ventaData)
        });

        const result = await response.json();

        if (result.success) {
            mostrarExito('Venta realizada con éxito');
            
            // Limpiar carrito después de la venta
            localStorage.removeItem('cart');
            
            // Redireccionar después de 2 segundos
            setTimeout(() => {
                window.location.href = '/pagina_pedidos/clientes_index/' + sucursalId;
            }, 2000);
        } else {
            throw new Error(result.message || 'Error al procesar la venta');
        }

    } catch (error) {
        mostrarError(error.message || 'Error al procesar la venta');
        document.getElementById('confirmBtn').disabled = false;
    }
}


// Función para calcular el total de la venta
function calcularTotalVenta(carrito) {
    return carrito.reduce((total, item) => total + (item.price * item.quantity), 0);
}

// Funciones para mostrar mensajes
function mostrarExito(mensaje) {
    const alert = document.getElementById('successAlert');
    alert.textContent = mensaje;
    alert.style.display = 'block';
    setTimeout(() => alert.style.display = 'none', 5000);
}

function mostrarError(mensaje) {
    const alert = document.getElementById('errorAlert');
    alert.textContent = mensaje;
    alert.style.display = 'block';
    setTimeout(() => alert.style.display = 'none', 5000);
}

// Inicializar cuando se carga la página
window.onload = cargarDatosRecibo;
    </script>
</body>
</html>
