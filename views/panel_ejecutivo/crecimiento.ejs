<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    crossorigin="anonymous" />
  <link rel="stylesheet" href="resources/css/recursosH.css" />
  <link rel="stylesheet" href="resources/css/panel_ejecutivo.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

  <title>Panel ejecutivo - Cuadro de Mando Integral</title>

</head>

<body>
  <!-- Encabezado -->
  <div class="header-container">
    <div class="breadcrumb">
      <a href="/panel_ejecutivo" class="reporte-link">
        <h1 style="color: #858B92; font-weight: bold; margin-right: 5px;">Panel
          Ejecutivo</h1>
      </a>
      <h2 style="font-size: 40px; margin: 0 10px;">›</h2>
      <h1 style="font-weight: bold;">
        <%= areaNombre %>
      </h1>
    </div>

  </div>

  <br>
  <div id="contenido-pdf">
    <!-- Nueva tabla de tablero -->
    <div class="tablero-container">
      <h2 class="titulo-tablero">
        Matriz del Tablero de Comando - <%= areaNombre %>
      </h2>
      <h4 class="titulo-tablero-sub">
        Fecha de inicio: <%= fechaInicio %> —
          Fecha de finalización: <%= fechaFin %>
      </h4>

      <div class="botones-tablero">
        <button class="btn-tablero"> Ver Grafico</button>
        <button id="btnAgregarObjetivo" class="btn-tablero">Agregar objetivos</button>
        <button id="btnAgregarIndicador" class="btn-tablero">Agregar indicadores</button>
        <button id="btnAsignarPersonas" class="btn-tablero">Asignar personas</button>
        <button id="EXportarPDF" class="btn-tablero">Exportar PDF</button>
        <button class="btn-tablero" onclick="publicarNotificacionArea(<%= ID_Area_objetivo %>)">Publicar</button>


        <button class="btn-tablero"> Eliminar</button>
      </div>

      <div class="tabla-wrapper">
        <table class="tabla-tablero">
          <thead>
            <tr>
              <th>Objetivo Estratégico</th>
              <th>Indicador (Lagging)</th>
              <th>%</th>
              <th>Semáforo</th>
              <th>Indicador de Proceso (Leading)</th>
              <th>Plan de Acción</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            <% for (let nombre in objetivos) { let lista=objetivos[nombre]; %>
              <% lista.forEach((item, index)=> { %>
                <tr>
                  <% if (index===0) { %>
                    <td rowspan="<%= lista.length %>">
                      <%= nombre %>
                    </td>
                    <% } %>
                      <td>
                        <%= item.kpi %>
                      </td>
                      <td>
                        <%= item.valor %>
                      </td>
                      <td><span class="semaforo-<%= item.semaforo %>"></span></td>
                      <td>
                        <%= item.inductor %>
                      </td>
                      <td>
                        <%= item.accion %>
                      </td>
                      <td>
                        <button class="boton-accion btn-completado"
                          onclick="editarValor(<%= item.kpi_id %>, <%= item.valor %>)">
                          Editar Valor (%)
                        </button>

                        <button class="boton boton-eliminar" onclick="eliminarKPI(<%= item.kpi_id %>)">
                          Eliminar indicador
                        </button>
                        <button class="boton boton-eliminar" onclick="eliminarObjetivo(<%= item.id %>)">
                          Eliminar objetivo
                        </button>

                      </td>


                </tr>
                <% }) %>
                  <% } %>
          </tbody>
        </table>
      </div>

    </div>
    <div class="tablero-container" style="margin-top: 40px;">
      <h2 class="titulo-tablero">Personal implicado a completar estos objetivos</h2>

      <% if (equipo.length> 0) { %>
        <div class="tabla-wrapper">
          <table class="tabla-tablero">
            <thead>
              <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Rol</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              <% equipo.forEach(persona=> { %>
                <tr>
                  <td>
                    <%= persona.ID_Empleado %>
                  </td>
                  <td>
                    <%= persona.Nombre %>
                  </td>
                  <td>
                    <%= persona.Apellido %>
                  </td>
                  <td>
                    <%= persona.Rol || 'Sin Rol' %>
                  </td>
                  <td>
                    <button class="boton boton-eliminar" onclick="eliminarPersona(<%= persona.ID_Empleado %>)">
                      Eliminar
                    </button>
                  </td>

                </tr>
                <% }); %>
            </tbody>
          </table>
        </div>
        <% } else { %>
          <p style="text-align:center;">No hay empleados asignados a esta área aún.</p>
          <% } %>
    </div>
  </div>
</body>

<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/1.10.22/js/jquery.dataTables.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  async function publicarNotificacionArea(idArea) {
    const { value: texto } = await Swal.fire({
      title: 'Publicar notificación',
      input: 'textarea',
      inputLabel: 'Mensaje para el equipo asignado',
      inputPlaceholder: 'Escribe aquí el mensaje...',
      showCancelButton: true,
      confirmButtonText: 'Publicar',
      preConfirm: (value) => {
        if (!value || value.trim().length === 0) {
          Swal.showValidationMessage('El mensaje no puede estar vacío');
          return false;
        }
        return value;
      }
    });

    if (texto) {
      try {
        const response = await fetch('/publicar-notificacion-area', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ idArea, descripcion: texto })
        });

        const data = await response.json();
        Swal.fire('Publicado', data.message, 'success');
      } catch (err) {
        Swal.fire('Error', 'No se pudo enviar la notificación', 'error');
      }
    }
  }
</script>


<script>
  document.querySelector(".btn-tablero").addEventListener("click", async () => {
    try {
      const res = await fetch(`/objetivos/promedios/<%= ID_Area_objetivo %>`);
      const data = await res.json();

      const labels = data.map(obj => obj.Objetivo);
      const valores = data.map(obj => Math.round(obj.Promedio));

      const canvas = document.createElement("canvas");
      canvas.width = 400;
      canvas.height = 300;

      await Swal.fire({
        title: 'Promedio de objetivos cumplidos',
        html: canvas,
        width: 1000,
        showConfirmButton: true,
        didOpen: () => {
          new Chart(canvas.getContext("2d"), {
            type: 'bar',
            data: {
              labels: labels,
              datasets: [{
                label: '% Promedio',
                data: valores,
                backgroundColor: 'rgba(54, 162, 235, 0.7)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
              }]
            },
            options: {
              scales: {
                y: {
                  beginAtZero: true,
                  max: 100
                }
              }
            }
          });
        }
      });

    } catch (error) {
      console.error("Error al cargar gráfico:", error);
      Swal.fire("Error", "No se pudo generar el gráfico", "error");
    }
  });
</script>


<script>
  async function editarValor(id, valorActual) {
    const { value: nuevoValor } = await Swal.fire({
      title: 'Editar porcentaje del KPI',
      html: `
        <label for="valorInput">Ingrese el nuevo porcentaje:</label>
        <input id="valorInput" type="number" class="swal2-input" value="${valorActual}" min="0" max="100" placeholder="Ej: 80">
      `,
      showCancelButton: true,
      confirmButtonText: 'Guardar',
      preConfirm: () => {
        const valor = document.getElementById('valorInput').value;
        if (!valor || valor < 0 || valor > 100) {
          Swal.showValidationMessage('Debe ser un número entre 0 y 100');
          return false;
        }
        return valor;
      }
    });

    if (nuevoValor !== undefined) {
      try {
        const response = await fetch('/panel_ejecutivo/valor', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, valor: nuevoValor })
        });

        const data = await response.json();
        Swal.fire('Actualizado', data.message, 'success').then(() => location.reload());
      } catch (err) {
        Swal.fire('Error', 'No se pudo actualizar el valor.', 'error');
      }
    }
  }

  async function eliminarKPI(id) {
    const confirmacion = await Swal.fire({
      title: '¿Deseas eliminar este KPI?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Eliminar',
      cancelButtonText: 'Cancelar'
    });

    if (confirmacion.isConfirmed) {
      try {
        const response = await fetch('/panel_ejecutivo/eliminar', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id })
        });

        const data = await response.json();
        Swal.fire('Eliminado', data.message, 'success').then(() => location.reload());
      } catch (err) {
        Swal.fire('Error', 'No se pudo eliminar el KPI.', 'error');
      }
    }
  }

  async function eliminarObjetivo(id) {
    const confirmacion = await Swal.fire({
      title: '¿Eliminar este objetivo?',
      text: 'Se eliminará también todos sus indicadores asociados.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sí, eliminar',
      cancelButtonText: 'Cancelar'
    });

    if (confirmacion.isConfirmed) {
      try {
        const response = await fetch('/panel_ejecutivo/eliminar_objetivo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id })
        });

        const data = await response.json();
        Swal.fire('Eliminado', data.message, 'success').then(() => location.reload());
      } catch (err) {
        Swal.fire('Error', 'No se pudo eliminar el objetivo.', 'error');
      }
    }
  }

</script>

<script>
  document.getElementById("btnAgregarObjetivo").addEventListener("click", async () => {
    const { value: objetivoText } = await Swal.fire({
      title: 'Nuevo Objetivo Estratégico',
      input: 'textarea',
      inputLabel: 'Describe el objetivo',
      inputPlaceholder: 'Ej. Mejorar la capacitación continua...',
      inputAttributes: {
        'aria-label': 'Escribe tu objetivo aquí'
      },
      showCancelButton: true,
      confirmButtonText: 'Guardar',
      cancelButtonText: 'Cancelar',
      inputValidator: (value) => {
        if (!value.trim()) {
          return '¡Debes ingresar un objetivo!';
        }
      }
    });

    if (objetivoText) {
      fetch('/objetivo/crear', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ID_Area_objetivo: <%= ID_Area_objetivo %>,  // asegúrate de pasar este valor desde el router
          Objetivo: objetivoText
        })
    })
    .then(res => res.json())
    .then(data => {
      Swal.fire({
        icon: 'success',
        title: '¡Objetivo creado!',
        text: data.message
      }).then(() => location.reload());
    })
    .catch(err => {
      Swal.fire('Error', 'No se pudo crear el objetivo', 'error');
    });
    }
  });
</script>

<script>
  document.getElementById("btnAgregarIndicador").addEventListener("click", async () => {
    // Cargar objetivos del área por AJAX
    const response = await fetch('/objetivos/por_area/<%= ID_Area_objetivo %>');
    const objetivos = await response.json();

    if (objetivos.length === 0) {
      return Swal.fire('Sin objetivos', 'Primero debes registrar un objetivo para esta área.', 'info');
    }

    const options = objetivos.map(obj => `<option value="${obj.ID_Objetivo}">${obj.Objetivo}</option>`).join('');

    const { value: formValues } = await Swal.fire({
      title: 'Nuevo Indicador (KPI)',
      html: `
        <div style="text-align: left;">
          <label for="objetivo">Objetivo asociado:</label><br>
          <select id="objetivo" class="swal2-select" style="width:80%; margin-bottom:10px;">
            ${options}
          </select>
      <br>
          <label for="kpi">KPI:</label><br>
          <input type="text" id="kpi" class="swal2-input" placeholder="Ej. Porcentaje de cumplimiento" style="width:80%;>
      <br>
          <label for="valor">Valor (%):</label><br>
          <input type="number" id="valor" value="0" class="swal2-input" placeholder="Ej." min="0" max="100" style="width:80%;>
      <br>
          <label for="inductor">Palanca / Inductor:</label><br>
          <input type="text" id="inductor" class="swal2-input" placeholder="Ej. Número de capacitaciones" style="width:80%;>
      <br>
          <label for="accion">Plan de acción:</label><br>
          <textarea id="accion" class="swal2-textarea" placeholder="Ej. Implementar un programa de formación continua"></textarea>
        </div>
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: 'Guardar',
      preConfirm: () => {
        const ID_Objetivo = document.getElementById('objetivo').value;
        const KPI = document.getElementById('kpi').value;
        const Valor = document.getElementById('valor').value;
        const Palanca = document.getElementById('inductor').value;
        const Accion = document.getElementById('accion').value;

        if (!ID_Objetivo || !KPI || !Valor || !Palanca || !Accion) {
          Swal.showValidationMessage('Todos los campos son obligatorios');
        }

        return { ID_Objetivo, KPI, Valor, Palanca, Accion };
      }
    });

    if (formValues) {
      fetch('/kpi/crear', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formValues)
      })
        .then(res => res.json())
        .then(data => {
          Swal.fire('¡Éxito!', data.message, 'success').then(() => location.reload());
        })
        .catch(() => {
          Swal.fire('Error', 'No se pudo guardar el KPI', 'error');
        });
    }
  });
</script>

<script>
  document.getElementById("btnAsignarPersonas").addEventListener("click", async () => {
    // Obtener empleados disponibles
    const response = await fetch('/empleados/disponibles');
    const empleados = await response.json();

    if (empleados.length === 0) {
      return Swal.fire('Sin empleados', 'No hay empleados disponibles.', 'info');
    }

    const options = empleados.map(emp =>
      `<option value="${emp.ID_Empleado}">${emp.Nombre} ${emp.Apellido}</option>`
    ).join('');

    const { value: selectedEmpleado } = await Swal.fire({
      title: 'Asignar persona al área',
      html: `
        <div style="text-align:left;">
          <label for="empleado">Empleado:</label><br>
          <select id="empleado" class="swal2-select" style="width:100%;">${options}</select>
        </div>
      `,
      showCancelButton: true,
      confirmButtonText: 'Asignar',
      preConfirm: () => {
        const ID_Empleado = document.getElementById('empleado').value;
        if (!ID_Empleado) {
          Swal.showValidationMessage('Debes seleccionar un empleado');
        }
        return ID_Empleado;
      }
    });

    if (selectedEmpleado) {
      fetch('/equipo_objetivo/asignar', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ID_Area_objetivo: <%= ID_Area_objetivo %>,
          ID_Empleado: selectedEmpleado
        })
    })
    .then(res => res.json())
    .then(data => {
      Swal.fire('Asignado', data.message, 'success').then(() => location.reload());
    })
    .catch(() => {
      Swal.fire('Error', 'No se pudo asignar el empleado', 'error');
    });
    }
  });
</script>

<script>
  async function eliminarPersona(ID_Empleado) {
    const confirmacion = await Swal.fire({
      title: '¿Eliminar persona del área?',
      text: 'Esta acción eliminará su asignación al objetivo.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sí, eliminar',
      cancelButtonText: 'Cancelar'
    });

    if (confirmacion.isConfirmed) {
      try {
        const response = await fetch('/equipo_objetivo/eliminar', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ID_Empleado: ID_Empleado,
            ID_Area_objetivo: <%= ID_Area_objetivo %>
          })
      });

      const data = await response.json();
      Swal.fire('Eliminado', data.message, 'success').then(() => location.reload());
    } catch (err) {
      Swal.fire('Error', 'No se pudo eliminar la persona.', 'error');
    }
  }
  }
</script>
<script>
  document.getElementById("EXportarPDF").addEventListener("click", () => {
    const idArea = <%= ID_Area_objetivo %>;
    window.open(`/reporte_panel/${idArea}`, "_blank");
  });
</script>


</html>